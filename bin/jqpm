#!/usr/bin/env node
'use strict';

/**
 * jqpm -- jQuery Package Manager
 * http://github.com/Xion/jqpm
 */


var util = require('util')
  , buffer = require('buffer')
  , fs = require('fs')
  , path = require('path')
  , querystring = require('querystring')
  , http = require('http')
  ;
var argparse = require('argparse')
  ;


var REPOSITORY_URL = "http://localhost:5000"; // using server mock
var DATA_DIR = ".jqpm";


/* jqpm commands */

/**
 * Install given list of packages.
 * :param packages: List of package names to install
 */
function installPackages(packages) {
	var dataDir = getDataDirectory();

	packages.forEach(function(name) {
		downloadPackageInfo(name, function(err, info) {
			if (err) {
				console.error("Could not fetch package %s: %s", name, err);
			} else {
				// write plugin file content
				var jsFile = base64Decode(info.file);
				var jsFileName = util.format("jquery.%s.js", name.toLowerCase());
				fs.writeFileSync(path.join(process.cwd(), jsFileName), jsFile);
				delete info.file;

				// save package information in data directory
				var infoFilePath = path.join(dataDir, name + ".json");
				fs.writeFileSync(infoFilePath, JSON.stringify(info));
			}
		});
	});
}


/* Utility functions */

function getDataDirectory() {
	var dataDir = path.join(process.cwd(), DATA_DIR);

	var exists = fs.existsSync(dataDir);
	if (exists) {
		var isDir = fs.statSync(dataDir).isDirectory();
		if (!isDir) {
			throw new Error(util.format(
				"'%s' found to not be directory -- aborting.", DATA_DIR));
		}
	} else {
		fs.mkdirSync(dataDir);
	}

	return dataDir;
}

function downloadPackageInfo(packageName, callback) {
	var url = packageUrl(packageName);
	var req = http.get(url, function(resp) {
		resp.setEncoding('utf8');

		var respBody = "";
		resp.on('data', function(chunk) {
			respBody += chunk;
		});
		resp.on('end', function() {
			var packageInfo = JSON.parse(respBody);
			callback(null, packageInfo);
		});
	});
	req.on('error', callback);
}

function packageUrl(packageName) {
	return util.format("%s/%s", REPOSITORY_URL, querystring.escape(packageName));
}

function base64Decode(data) {
	return buffer.Buffer(data, 'base64').toString();
}


/* main(), command line arguments handling etc. */

/**
 * Main function.
 * :param args: Command line arguments, as parsed by argparse
 */
function main(args) {
	try {
		if (args.command === 'install')
			return installPackages(args.package);
	} catch (e) {
		console.error(e.message);
	}
}

/**
 * Creates the ArgumentParser object to parse command line args.
 */
function argumentParser() {
	var parser = new argparse.ArgumentParser({
		prog: "jqpm",
		description: "jQuery Package Manager",
		usage: "jqpm COMMAND [OPTIONS]",
	});
	var subparsers = parser.addSubparsers({dest: "command"});

	var installParser = subparsers.addParser('install', {addHelp: true});
	installParser.addArgument(['package'], {
		action: 'append',
		help: "Package(s) to install"
	});

	return parser;
}

var args = argumentParser().parseArgs();
main(args);
